AWS는 일단 가입.
리전은 서울로 지정 (거리에 따라 비용이 달라짐)


EC2 서비스 (Elastic Compute Cloud)
  - 가상컴퓨터
  - AWS 의 대표 서비스
  - 컴퓨터 1대 = 인스턴스
  - 인스턴스 생성
    1. EC2 서비스 클릭
    2. 인스턴스 시작 클릭
    3. key pair 생성. 잘 보관해야됨. 이때 key파일 깃허브같은데 올렸다가는 해킹으로 탈탈털림
    4. 네트워크 설정 - 편집 - 보안그룹이름, 설명 지정
    5. 인스턴스 시작.
  - 보안그룹 설정
    - SSH (22번 포트) : 원격 연결
    - MySQL/Aurora (3306 포트) : MySQL 원격접속 -> 얘 뺴고 나머지 모두 Anywhere ipv4로 지정
    - HTTP (80번 포트) : HTTP 통신
    - 사용자 지정 TCP (8000, 8080, 8081) : HTTP 예비 포트
    - 모든 ICMP - IPv4: PING 테스트
    - 모두 Anywhere-IPv4 로 지정
  - 인스턴스 상태
    - 중지 -> 서버를 잠시 끄는 것
    - 종료 -> 끝내버리는것. 2~3시간뒤면 자동으로 사라진다.
인바운드
  - 클라이언트가 자신의 서버 데이터에 들어올 수 있는 규칙
  - 서버 내부로 들어오는것
  - 서버에 업로드할때
아웃바운드
  - 서버에서 나갈 수 있는 데이터에 대한 규칙
  - 서버에서 다운로드 할때

탄력적 IP
  - 인스턴스를 중지하게 되면 다시 시작할 때 IP가 변경
  - IP 가 바뀌는 불편함에 대한 개선점으로 탄력적 IP를 활용
  - AWS 리전 당 총 5개 무료로 사용 가능한 고정 IP
  - 추가요금 없으나, 만들어놓고 사용하지 않으면 요금 발생
  - 탄력적 IP 할당 눌러서 적용
    - 생성한 IP 눌러서 인스턴스와 프라이빗IP 설정
  - 주의사항!!!!
    - 인스턴스 종료 후 탄력적 IP 미사용시 요금부과
      - 갱신 or 제거 필요!
      - 연결해제 후 릴리즈 활성화
  
///////////////////////////////////////////////////////////////////////////////////////////////////////////
SSH

원격 접속 터미널
• Putty : 가장 널리 사용됨 -> 나중엔 putty 쓰장..
• MobaXterm : 편리한 오픈소스 터미널

Ubuntu Server 엔 기본적으로 openssh-server 가 설치되어 있다

MobaXterm
  - https://mobaxterm.mobatek.net/ - home addition - Installer Edition 다운
  - AWS와의 연결
    - 좌측 상단 Session - SSH - AWS의 고정IP 퍼블릭 주소 입력
    - username은 대충 ubuntu로.. -> AWS에 기본유저이름이 ubuntu로 되어있다. 바꿔주든가!
    - use private key -> 아까 다운받았던 key 지정
    - bookmarkSettings에 알아보기 쉽게 Session Name을 AWS-NODE-CLASS 같은걸로 지정
  - 접속성공!
    - 한국 시간대인 KST로 변경
      - $ sudo timedatectl set-timezone Asia/Seoul
      - $ date
  - 파일 업로드 / 다운로드    
    - 마우스 드래그로 업로드/다운로드 가능

LINUX 기초 명령어
  - 디렉토리 보기 : ls -al
    - 옵션 a : all. 숨김파일까지 출력
    - 옵션 l : list. list형태로 상세보기
    - 줄여서 ll로 쓸 수 있지만, 임베디드에는 지원안하는 경우도 있으므로 ls -al로 쓰자.
  - 현재 디렉토리 확인 : pwd
  - 화면 지우기 : clear
  - 디렉토리 이동 : cd
    - 상위 디렉토리로 이동 : cd..
    - 해당 디렉토리로 이동 : cd "디렉토리이름"
    - 홈 디렉토리로 이동 : cd ~
    - 이전 디렉토리로 이동 : cd -
    - echo는 나오지 않지만, Tab을 누르면 자동완성시켜준다. (하위 include 폴더로 이동 시 cd i 까지 치고 Tab 하면 자동완성된다.) 
      - 후보가 여러개일 경우 Tab Tab을 눌러야 뜬다.
  - 복사 / 붙여넣기 -> ctrl + Insert / Shift + Insert (CC, CV가 아니다!!)
  - 새 파일 생성 : touch [파일명]
    - 리눅스는 윈도우와 달리 확장자 개념이 없다
    - 이미 있는 파일이라면, 변경된 시간을 현재 시간으로 업데이트 한다.
    - 예시 : touch ./bts
      - ./는 현재 디렉토리를 의미하는데, 생략해도 되지만 가독성 측면에서 파일명임을 나타낸다.
  - 파일 삭제 : rm [파일명]
  - 디렉토리 생성 : mkdir "디렉토리명"
    - mkdir a b c : a, b, c 디렉토리 생성
    - p 옵션 : 디렉토리 하위메뉴 까지 모두 한꺼번에 생성
      - mkdir –p ./aaa/bbb/ccc/ddd
  - 디렉토리 삭제 : rmdir “디렉토리명
    - 디렉토리 안에 파일이 있으면 삭제 안됨
    - rmdir 대신, rm –r “경로” 를 사용하면 디렉토리 내부 파일까지 모두 삭제 가능
      - -r 은 디렉토리에 사용하겠다는 옵션이다.
      - rmdir 대신 사용하기 더 간편한 rm –r 을 사용하자.
      - 더 강하게 모든 것을 지우는 것은 rm -rf 이다. f는 경고, 권한 하나 없이 걍 실행해버린다.
  - 파일 이동 / 이름변경 : mv
    - 이동 : mv [파일] [옮길 곳]
    - 이름변경 : mv [파일] [파일이름]
  - 파일 복사 : cp [파일] [경로]
    - –r 옵션 : 디렉토리 복사

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

Nginx (엔진X) -> 간단한 웹 서버
  - 설치
    - sudo apt update
      - apt(advanded packaging tool) : 리눅스의 패키지 관리 도구
    - sudo apt install nginx
    - nginx -v (버전확인)
    -> 설치 후 AWS IP를 브라우저에 입력하면 NGINX 페이지가 쓰면 성공
  - 간단한 서버 제작
    - home에 ~/nginx-test 디렉만들기
    - index.html 간단하게 하나 만들어서 복사
    - 만든 프로젝트 디렉터리를 nginx에 연결
      - nginx 설치시 /etc/nginx 라는 디렉터리가 자동으로 생성된다.
      - sudo nano /etc/nginx/sites-available/default (혹은 vi) 
      - 기존 /var/www/html 으로 되어있는경로를 생성한 디렉토리로 변경한다.
        - /home/ubuntu/nginx-test
        - 복사한 디렉토리 붙여넣기 (shift + insert)
        - 붙여 넣은 후 Ctrl + O로 작성 후 Ctrl + X로 나가기
    - 리로드 : sudo service nginx reload
    -> 이제 IP로 접근하면 해당 파일이 뜬다.

text Editor
  - nano
    - 일반 텍스트에디터와 유사
  - vi/vim
    - 임베디드 개발자가 가장 많이 사용
  
무료도메인 설정하기
  - https://내도메인.한국 가입
  - 원하는 도메인 검색 후 선택
  - 고급설정(DNS) -> IP연결(A)에 AWS IP 입력
  - 수정하기 누르면 바로 적용댐