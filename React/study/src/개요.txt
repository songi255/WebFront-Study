개발환경 설정
  - tool chain
    - 개발환경설정에 여러 tool 들이 상호보완될 것이다. 이런걸 툴체인이라고 한다.
  - 상황에 따른 tool 선택
    1. 새로운 SPA를 만들고 싶다면?
      1. react app 만들기 (물론 이전에 package.json 부터 만들자!)
        - npx create-react-app my-app
        - cd my-app
        - npm start
          - live server 처럼 실시간 수정환경을 켜는 것이다.
          - localhost:3000 으로 접속할 수 있다.
      2. 추가 환경세팅 : Babel, Webpack, ESLint(대부분 이렇게 씀)
        - create-react-app 쓰면 bable, webpack, eslint 다 기본으로 깔려있다.
        - 추가로 eslint, prettier 사용해보자.
          - eslint, prettier extension 설치
            - settings - format on save 활성화
          - npm eslint --init 으로 .eslintrc.* 생성
            - rules에 "react/react-in-jsx-scope": "off" 넣으면 jsx 형식 미사용으로 인한 오류는 skip
            - test or expect is not defined 뜨면 env 에 "jest": true 추가
          - npm i eslint-config-prettier eslint-plugin-prettier prettier --save-dev
          - npm install eslint-plugin-react-hooks --save-dev
            - react hooks 규칙도 eslint에 추가하는 것.
          - .eslintrc 에 추가
            - "plugin:prettier/recommended"
            - "plugin:react-hooks/recommended"
        - 정리해보자. prettier 는 Alt + Shift + F 누르면 코드 정렬한다.
        - 이 정렬 기준이 eslint 랑 달라 오류가 발생하기도 하기에, eslint-config-prettier 를 사용해서 eslint가 정렬상태외에것만 체크하도록 하는 것.
        - 즉, 정렬은 eslint 말고 prettier 에게 맡기는 것이다. 결국 여기서 오류 안나면 아무 상관없다.
        - 참고로 prettier custom 설정은 .prettierrc.json 을 만들어서 사용할 수 있다.
      3. 배포할 준비가 되었다면 npm run build 로 빌드한다.
        - build 폴더에 결과물이 생긴다.
    2. SSR node.js를 만들고싶다면? -> Next.js
      - 스타일링과 라우팅 해결책을 가지고있다.
      - server로 node.js를 사용한다고 가정한다.
    3. 정적페이지를 만들고있다면? -> Gatsby
    4. Component를 만들거나 이미 존재하는 코드베이스에 통합한다면? -> 더 유연한 대안들을 사용
      - 여기 나오는 tool 들은 숙련됬다면 사용을 고려하자. 옵션이다. 더 좋은게 아니다.
      - Neutrino : webpack의 장점과 React의 단순함과 미리 설정된 앱과 컴포넌트를 합친 것
      - Nx : 풀스택 모노레포 개발을 위한 도구이며, React, Next.js, Express 등을 기본적으로 지원
      - Parcel : React와 함께 사용할 수 있고 빠르고 설정이 필요 없는 웹 애플리케이션 bundler
      - Razzle : 서버 렌더링 프레임워크. 설정이 필요 없지만, Next.js보다 다루기 쉽습니다.